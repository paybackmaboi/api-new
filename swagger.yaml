openapi: 3.0.0
info:
  title: Account Service API
  description: API documentation for managing account authentication, registration, and user management.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /authenticate:
    post:
      summary: Authenticate a user
      description: Authenticate a user and return an authentication token.
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  refreshToken:
                    type: string
                  id:
                    type: integer
                  email:
                    type: string
        '400':
          description: Invalid input

  /refresh-token:
    post:
      summary: Refresh authentication token
      description: Refresh the user's authentication token using the refresh token.
      operationId: refreshToken
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  refreshToken:
                    type: string
                  id:
                    type: integer
                  email:
                    type: string
        '400':
          description: Invalid token

  /revoke-token:
    post:
      summary: Revoke the authentication token
      description: Revoke the user's token or an admin can revoke any user's token.
      operationId: revokeToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: Refresh token to be revoked
              required:
                - token
      responses:
        '200':
          description: Token revoked successfully
        '401':
          description: Unauthorized

  /register:
    post:
      summary: Register a new user
      description: Register a new user in the system.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                confirmPassword:
                  type: string
                  description: Must match the password
                acceptTerms:
                  type: boolean
              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - acceptTerms
      responses:
        '200':
          description: Registration successful
        '400':
          description: Invalid data

  /verify-email:
    post:
      summary: Verify email address
      description: Verify the user's email address using the token sent during registration.
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        '200':
          description: Email verified successfully
        '400':
          description: Invalid or expired token

  /forgot-password:
    post:
      summary: Request a password reset
      description: Send a password reset link to the user's email.
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
      responses:
        '200':
          description: Password reset instructions sent
        '400':
          description: Invalid email

  /validate-reset-token:
    post:
      summary: Validate password reset token
      description: Validate the reset token to ensure it’s valid before resetting the password.
      operationId: validateResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
                - token
      responses:
        '200':
          description: Token is valid
        '400':
          description: Invalid or expired token

  /reset-password:
    post:
      summary: Reset password
      description: Reset the user’s password using the provided reset token.
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string
                  minLength: 6
                confirmPassword:
                  type: string
                  description: Must match the password
              required:
                - token
                - password
                - confirmPassword
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Invalid token or mismatched passwords

  /users:
    get:
      summary: Get all users (Admin only)
      description: Admins can retrieve a list of all users.
      operationId: getAll
      responses:
        '200':
          description: List of users
          content:
            application/json:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
        '401':
          description: Unauthorized

  /users/{id}:
    get:
      summary: Get a user by ID
      description: Retrieve a specific user's details.
      operationId: getById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              type: object
              properties:
                id:
                  type: integer
                email:
                  type: string
        '404':
          description: User not found
        '401':
          description: Unauthorized

  /users:
    post:
      summary: Create a new user (Admin only)
      description: Admins can create a new user.
      operationId: create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                confirmPassword:
                  type: string
                  description: Must match the password
                role:
                  type: string
                  enum:
                    - Admin
                    - User
              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - role
      responses:
        '200':
          description: User created successfully
        '400':
          description: Invalid data
        '401':
          description: Unauthorized

  /users/{id}:
    put:
      summary: Update user information
      description: Update a user's details. Only admins can update the role.
      operationId: update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                confirmPassword:
                  type: string
                  description: Must match the password
                role:
                  type: string
                  enum:
                    - Admin
                    - User
              required:
                - title
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid data
        '401':
          description: Unauthorized

  /users/{id}:
    delete:
      summary: Delete a user
      description: Delete a specific user. Only admins or the user themselves can delete an account.
      operationId: delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

